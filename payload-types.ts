/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    pages: Page;
    packages: Package;
    'package-categories': PackageCategory;
    'package-periods': PackagePeriod;
    locations: Location;
    'activity-categories': ActivityCategory;
    activities: Activity;
    'time-slots': TimeSlot;
    'activity-time-slots': ActivityTimeSlot;
    'activity-inventory': ActivityInventory;
    bookings: Booking;
    payments: Payment;
    'booking-sessions': BookingSession;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    packages: PackagesSelect<false> | PackagesSelect<true>;
    'package-categories': PackageCategoriesSelect<false> | PackageCategoriesSelect<true>;
    'package-periods': PackagePeriodsSelect<false> | PackagePeriodsSelect<true>;
    locations: LocationsSelect<false> | LocationsSelect<true>;
    'activity-categories': ActivityCategoriesSelect<false> | ActivityCategoriesSelect<true>;
    activities: ActivitiesSelect<false> | ActivitiesSelect<true>;
    'time-slots': TimeSlotsSelect<false> | TimeSlotsSelect<true>;
    'activity-time-slots': ActivityTimeSlotsSelect<false> | ActivityTimeSlotsSelect<true>;
    'activity-inventory': ActivityInventorySelect<false> | ActivityInventorySelect<true>;
    bookings: BookingsSelect<false> | BookingsSelect<true>;
    payments: PaymentsSelect<false> | PaymentsSelect<true>;
    'booking-sessions': BookingSessionsSelect<false> | BookingSessionsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    navigation: Navigation;
  };
  globalsSelect: {
    navigation: NavigationSelect<false> | NavigationSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name?: string | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  caption?: string | null;
  mediaType: 'image' | 'video';
  videoSettings?: {
    autoplay?: boolean | null;
    loop?: boolean | null;
    /**
     * Required for autoplay to work in most browsers
     */
    muted?: boolean | null;
    controls?: boolean | null;
    /**
     * Thumbnail image shown before video plays
     */
    poster?: (string | null) | Media;
  };
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    smallCard?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    card?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    tablet?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    desktop?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  /**
   * Main title of the page
   */
  title: string;
  /**
   * URL path for this page (auto-generated from title, but can be customized)
   */
  slug: string;
  /**
   * Essential page details
   */
  basicInfo: {
    /**
     * Type of page this is
     */
    pageType:
      | 'home'
      | 'activities'
      | 'fishing'
      | 'live-volcanos'
      | 'specials'
      | 'packages'
      | 'destinations'
      | 'ferry'
      | 'boat';
  };
  /**
   * Configure this destination page. Main destinations appear as bold categories in navigation, sub-destinations appear as indented items underneath their parent.
   */
  destinationInfo?: {
    /**
     * Is this a main category or a sub-destination?
     */
    destinationType: 'index' | 'main' | 'sub';
    /**
     * Settings for the main destinations overview page
     */
    indexSettings?: {
      /**
       * Automatically include all published main destinations
       */
      showAllDestinations?: boolean | null;
      /**
       * Select specific destinations to feature (optional - overrides automatic inclusion)
       */
      featuredDestinations?: (string | Page)[] | null;
      /**
       * Custom ordering for destinations (drag to reorder)
       */
      destinationOrder?:
        | {
            destination?: (string | null) | Page;
            /**
             * Lower numbers appear first
             */
            displayOrder?: number | null;
            id?: string | null;
          }[]
        | null;
    };
    /**
     * URL slug for this main category (auto-generated from page title, but can be customized)
     */
    mainCategorySlug?: string | null;
    /**
     * Select the main destination category this belongs to (Port Blair, Havelock, etc.)
     */
    parentMainCategory?: (string | null) | Page;
    /**
     * URL slug for this sub-destination (auto-generated from page title, but can be customized)
     */
    subcategorySlug?: string | null;
    /**
     * What type of destination is this?
     */
    subcategoryType?:
      | ('beach' | 'island' | 'attraction' | 'museum' | 'point' | 'sports' | 'cave' | 'waterfall' | 'other')
      | null;
    /**
     * Control how this destination appears in the header navigation dropdown. Destinations are automatically included in navigation - you can control visibility and order here.
     */
    navigationSettings?: {
      /**
       * Display this destination in the header navigation
       */
      showInNavigation?: boolean | null;
      /**
       * Order in navigation dropdown (lower numbers first)
       */
      navigationOrder?: number | null;
      /**
       * Custom label for navigation (defaults to page title)
       */
      navigationLabel?: string | null;
    };
  };
  /**
   * Search engine optimization settings
   */
  seoMeta?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    metaImage?: (string | null) | Media;
  };
  /**
   * Main content blocks for this page
   */
  pageContent?: {
    /**
     * Add and arrange content blocks for this page
     */
    content?:
      | (
          | {
              /**
               * Main title of the hero section (only on the home page)
               */
              title?: string | null;
              /**
               * Subtitle of the hero section (only on the home page)
               */
              subtitle?: string | null;
              /**
               * Description of the hero section (only on the home page)
               */
              description?: string | null;
              image: string | Media;
              ctaText?: string | null;
              ctaHref?: string | null;
              /**
               * Initial tab of the booking form
               */
              initialTab?: ('activities' | 'ferry' | 'local-boat') | null;
              id?: string | null;
              blockName?: string | null;
              blockType: 'hero';
            }
          | {
              title: string;
              /**
               * Word to highlight in the title
               */
              specialWord?: string | null;
              description?: string | null;
              image: string | Media;
              ctaText?: string | null;
              ctaHref?: string | null;
              id?: string | null;
              blockName?: string | null;
              blockType: 'serviceTeaser';
            }
          | {
              title: string;
              /**
               * Word to highlight in the title
               */
              specialWord?: string | null;
              description?: string | null;
              image?: (string | null) | Media;
              ctaText?: string | null;
              ctaHref?: string | null;
              id?: string | null;
              blockName?: string | null;
              blockType: 'serviceFeature';
            }
          | {
              title: string;
              specialWord: string;
              items?:
                | {
                    question: string;
                    answer: string;
                    id?: string | null;
                  }[]
                | null;
              id?: string | null;
              blockName?: string | null;
              blockType: 'faq';
            }
          | {
              subtitle?: string | null;
              title: string;
              image?: (string | null) | Media;
              imageAlt?: string | null;
              ctaText?: string | null;
              ctaHref?: string | null;
              id?: string | null;
              blockName?: string | null;
              blockType: 'largeCard';
            }
          | {
              title: string;
              text: string;
              highlightedPhrases?:
                | {
                    phrase?: string | null;
                    id?: string | null;
                  }[]
                | null;
              id?: string | null;
              blockName?: string | null;
              blockType: 'trivia';
            }
          | {
              title: string;
              specialWord?: string | null;
              description?: string | null;
              cards?:
                | {
                    title: string;
                    description?: string | null;
                    icon: string | Media;
                    id?: string | null;
                  }[]
                | null;
              id?: string | null;
              blockName?: string | null;
              blockType: 'experience';
            }
          | {
              title?: {
                text?: string | null;
                specialWord?: string | null;
              };
              stats?:
                | {
                    value: string;
                    description: string;
                    /**
                     * Icon identifier - one of (users, ferry, island)
                     */
                    icon?: string | null;
                    id?: string | null;
                  }[]
                | null;
              id?: string | null;
              blockName?: string | null;
              blockType: 'trustStats';
            }
          | {
              title: string;
              specialWord?: string | null;
              description?: string | null;
              points?:
                | {
                    title: string;
                    description?: string | null;
                    id?: string | null;
                  }[]
                | null;
              image?: (string | null) | Media;
              imageAlt?: string | null;
              ctaText?: string | null;
              ctaHref?: string | null;
              id?: string | null;
              blockName?: string | null;
              blockType: 'whyChooseUs';
            }
          | {
              title: string;
              description?: string | null;
              slides?:
                | {
                    title: string;
                    price?: string | null;
                    description?: string | null;
                    image?: (string | null) | Media;
                    /**
                     * Optional: Custom text for the action button (defaults to 'View More')
                     */
                    ctaLabel?: string | null;
                    /**
                     * Optional: Custom link for the action button (defaults to '/packages/{slide-id}')
                     */
                    ctaLink?: string | null;
                    id?: string | null;
                  }[]
                | null;
              id?: string | null;
              blockName?: string | null;
              blockType: 'packageCarousel';
            }
          | {
              title: string;
              specialWord?: string | null;
              description?: string | null;
              ctaText?: string | null;
              ctaHref?: string | null;
              images?:
                | {
                    image: string | Media;
                    /**
                     * Alt text for the image in this context (e.g. 'Island 1', 'Island 2', 'Island 3')
                     */
                    alt: string;
                    id?: string | null;
                  }[]
                | null;
              id?: string | null;
              blockName?: string | null;
              blockType: 'hiddenGems';
            }
          | {
              title: string;
              specialWord: string;
              description?: string | null;
              /**
               * Select the activities to display in the top activities section
               */
              activityCategories: (string | ActivityCategory)[];
              /**
               * Maximum number of activities to display
               */
              maxActivities?: number | null;
              /**
               * Show 'Customer's Favourite' badge on featured activities
               */
              showCustomerFavorite?: boolean | null;
              id?: string | null;
              blockName?: string | null;
              blockType: 'topActivityCategories';
            }
          | {
              title: string;
              specialWord?: string | null;
              description?: string | null;
              categories?:
                | {
                    title: string;
                    subtitle?: string | null;
                    image?: (string | null) | Media;
                    imageAlt?: string | null;
                    id?: string | null;
                  }[]
                | null;
              id?: string | null;
              blockName?: string | null;
              blockType: 'visualCategoryGrid';
            }
          | {
              title: string;
              /**
               * Special word to highlight in the title
               */
              specialWord?: string | null;
              /**
               * Brief overview of reaching the destination
               */
              description?: string | null;
              cards?:
                | {
                    title: string;
                    description?: string | null;
                    icon?: (string | null) | Media;
                    id?: string | null;
                  }[]
                | null;
              id?: string | null;
              blockName?: string | null;
              blockType: 'howToReach';
            }
          | {
              title: string;
              /**
               * Word to highlight in the title
               */
              specialWord: string;
              partners?:
                | {
                    partner: string | Media;
                    alt?: string | null;
                    id?: string | null;
                  }[]
                | null;
              id?: string | null;
              blockName?: string | null;
              blockType: 'partners';
            }
          | {
              title: string;
              specialWord: string;
              description: string;
              /**
               * Upload a video file; should be a .mp4 file; size should be less than 10MB
               */
              media: string | Media;
              /**
               * Alt text for the video
               */
              alt: string;
              id?: string | null;
              blockName?: string | null;
              blockType: 'story';
            }
          | {
              title: string;
              /**
               * Word to highlight in the title
               */
              specialWord?: string | null;
              subtitle?: string | null;
              testimonials?:
                | {
                    text: string;
                    author?: string | null;
                    avatar: string | Media;
                    /**
                     * Rotation of the testimonial card in degrees
                     */
                    rotation: number;
                    id?: string | null;
                  }[]
                | null;
              id?: string | null;
              blockName?: string | null;
              blockType: 'testimonials';
            }
          | {
              title: string;
              subtitle: string;
              description?: string | null;
              image: string | Media;
              id?: string | null;
              blockName?: string | null;
              blockType: 'secondaryBanner';
            }
          | {
              title: string;
              specialWord?: string | null;
              description?: string | null;
              steps?:
                | {
                    title: string;
                    description?: string | null;
                    icon: string | Media;
                    id?: string | null;
                  }[]
                | null;
              id?: string | null;
              blockName?: string | null;
              blockType: 'planInFourEasySteps';
            }
          | {
              title: string;
              specialWord?: string | null;
              description?: string | null;
              ferries?:
                | {
                    image: string | Media;
                    imageAlt: string;
                    title: string;
                    price: string;
                    rating: number;
                    href: string;
                    id?: string | null;
                  }[]
                | null;
              id?: string | null;
              blockName?: string | null;
              blockType: 'trustedFerries';
            }
          | {
              title: string;
              /**
               * This word will be styled differently in the title
               */
              specialWord?: string | null;
              description?: string | null;
              /**
               * Toggle to show/hide the package and period selector above the packages grid
               */
              showPackageSelector?: boolean | null;
              /**
               * Title for the package selector section
               */
              selectorTitle?: string | null;
              /**
               * Leave empty to show all categories, or select specific ones to display
               */
              categoryFilter?: {
                useCustomSelection?: boolean | null;
                /**
                 * Select which package categories to display. If none selected, all will be shown.
                 */
                selectedCategories?: (string | PackageCategory)[] | null;
                sortBy?: ('title' | 'createdAt_desc' | 'createdAt_asc' | 'custom') | null;
              };
              id?: string | null;
              blockName?: string | null;
              blockType: 'dynamicPackages';
            }
          | {
              /**
               * Leave empty to auto-generate from category (e.g., 'Scuba Diving Packages')
               */
              selectorTitle?: string | null;
              showPackageSelector?: boolean | null;
              noPackagesMessage?: {
                title?: string | null;
                message?: string | null;
                showContactButton?: boolean | null;
              };
              displayOptions?: {
                packagesPerRow?: ('1' | '2' | '3') | null;
                showPackageDetails?: {
                  showPrice?: boolean | null;
                  showDuration?: boolean | null;
                  showLocations?: boolean | null;
                };
              };
              id?: string | null;
              blockName?: string | null;
              blockType: 'dynamicCategoryPackages';
            }
        )[]
      | null;
  };
  /**
   * Control page visibility and publishing
   */
  publishingSettings?: {
    /**
     * Publishing status of this page
     */
    status?: ('draft' | 'published' | 'archived') | null;
    /**
     * When this page was published
     */
    publishedAt?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "activity-categories".
 */
export interface ActivityCategory {
  id: string;
  /**
   * e.g., 'Scuba Diving', 'Water Sports', 'Adventure'
   */
  name: string;
  /**
   * URL-friendly version (auto-generated from name)
   */
  slug: string;
  /**
   * Brief description of this activity category
   */
  description: string;
  /**
   * Uncheck to hide this category from public view
   */
  isActive?: boolean | null;
  /**
   * Display order (0 = first, higher numbers = later)
   */
  sortOrder?: number | null;
  /**
   * Select parent category for hierarchical organization
   */
  parentCategory?: (string | null) | ActivityCategory;
  /**
   * Image representing this category (recommended: square format, min 64x64px)
   */
  image: string | Media;
  /**
   * Search engine optimization settings
   */
  seo?: {
    /**
     * Leave blank to auto-generate from category name
     */
    metaTitle?: string | null;
    /**
     * Brief description for search engines (150-160 characters recommended)
     */
    metaDescription?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * Manage package category information displayed on the website
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "package-categories".
 */
export interface PackageCategory {
  id: string;
  /**
   * Display title for the category (e.g., "Honeymoon Packages")
   */
  title: string;
  /**
   * URL slug (e.g., "honeymoon-retreat")
   */
  slug: string;
  categoryDetails: {
    /**
     * Brief description shown on category cards
     */
    description: string;
    /**
     * Shorter version for compact displays
     */
    shortDescription?: string | null;
  };
  media?: {
    /**
     * Main image for the category
     */
    heroImage?: (string | null) | Media;
    /**
     * Images shown on category cards (max 3)
     */
    cardImages?:
      | {
          image: string | Media;
          alt: string;
          id?: string | null;
        }[]
      | null;
  };
  displaySettings: {
    /**
     * Display order on the packages page
     */
    order: number;
    /**
     * Show this category on the website
     */
    isActive?: boolean | null;
    /**
     * Feature this category prominently
     */
    isFeatured?: boolean | null;
    /**
     * Custom page title for category page (e.g., "Honeymoon")
     */
    pageTitle?: string | null;
    /**
     * Word to highlight in the page title
     */
    specialWord?: string | null;
  };
  content?: {
    /**
     * Key highlights or features of this category
     */
    highlights?:
      | {
          highlight?: string | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Popular destinations for this category
     */
    popularDestinations?:
      | {
          destination?: string | null;
          isPopular?: boolean | null;
          id?: string | null;
        }[]
      | null;
  };
  seo?: {
    /**
     * SEO title (leave empty to auto-generate)
     */
    metaTitle?: string | null;
    /**
     * SEO description (leave empty to auto-generate)
     */
    metaDescription?: string | null;
    metaImage?: (string | null) | Media;
    /**
     * SEO keywords for this category
     */
    keywords?:
      | {
          keyword?: string | null;
          id?: string | null;
        }[]
      | null;
    systemCategoryId?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "packages".
 */
export interface Package {
  id: string;
  title: string;
  /**
   * URL-friendly version of the title (auto-generated from title)
   */
  slug: string;
  /**
   * Core details of the package
   */
  coreInfo: {
    /**
     * Select the package category
     */
    category: string | PackageCategory;
    /**
     * Select the package period
     */
    period: string | PackagePeriod;
    /**
     * Select the package locations (multiple allowed)
     */
    locations: (string | Location)[];
  };
  /**
   * Descriptions for the package
   */
  descriptions: {
    description: string;
    /**
     * Brief description for cards and listings
     */
    shortDescription?: string | null;
  };
  /**
   * Pricing details
   */
  pricing: {
    /**
     * Price in your currency
     */
    price: number;
    /**
     * Original price (for showing discounts)
     */
    originalPrice?: number | null;
  };
  /**
   * Images for the package
   */
  media: {
    images: {
      image: string | Media;
      alt: string;
      caption?: string | null;
      id?: string | null;
    }[];
  };
  /**
   * Detailed package information
   */
  packageDetails: {
    highlights: {
      highlight: string;
      id?: string | null;
    }[];
    inclusions: {
      inclusion: string;
      id?: string | null;
    }[];
    exclusions: {
      exclusion: string;
      id?: string | null;
    }[];
    itinerary: {
      day: number;
      title: string;
      description?: string | null;
      activities?:
        | {
            activity: string;
            id?: string | null;
          }[]
        | null;
      id?: string | null;
    }[];
    notes?:
      | {
          note: string;
          id?: string | null;
        }[]
      | null;
  };
  /**
   * Settings for featuring the package
   */
  featuredSettings?: {
    /**
     * Show in top 3 packages on homepage
     */
    featured?: boolean | null;
    /**
     * Order for featured packages (1-3)
     */
    featuredOrder?: number | null;
  };
  /**
   * SEO settings (auto-populated from package data)
   */
  seo?: {
    /**
     * Auto-populated from title if empty
     */
    metaTitle?: string | null;
    /**
     * Auto-populated from short description if empty
     */
    metaDescription?: string | null;
    /**
     * Auto-populated from first package image if empty
     */
    metaImage?: (string | null) | Media;
  };
  /**
   * Control page visibility and publishing
   */
  publishingSettings?: {
    /**
     * Publishing status of this page
     */
    status?: ('draft' | 'published' | 'archived') | null;
    /**
     * When this page was published
     */
    publishedAt?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "package-periods".
 */
export interface PackagePeriod {
  id: string;
  /**
   * Display name (e.g., '3 Days 2 Nights')
   */
  title: string;
  /**
   * Internal value (e.g., '3-2')
   */
  value: string;
  /**
   * Short display name (e.g., '3D 2N')
   */
  shortTitle?: string | null;
  /**
   * Display order in selectors
   */
  order?: number | null;
  /**
   * Whether this period is active in the selector
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "locations".
 */
export interface Location {
  id: string;
  /**
   * e.g., 'Port Blair', 'Havelock Island', 'Neil Island'
   */
  name: string;
  slug: string;
  /**
   * What type of location is this?
   */
  type:
    | 'ferry_port'
    | 'activity_location'
    | 'boat_departure'
    | 'package_destination'
    | 'accommodation'
    | 'attraction'
    | 'general';
  /**
   * Brief description of the location
   */
  description?: string | null;
  media?: {
    featuredImage?: (string | null) | Media;
    gallery?:
      | {
          image: string | Media;
          alt: string;
          caption?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  seo?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
  };
  isActive?: boolean | null;
  /**
   * Priority for sorting (higher numbers appear first)
   */
  priority?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "activities".
 */
export interface Activity {
  id: string;
  title: string;
  /**
   * URL-friendly version of the title
   */
  slug: string;
  coreInfo: {
    description: string;
    /**
     * Brief description for cards and listings
     */
    shortDescription?: string | null;
    category: (string | ActivityCategory)[];
    location: (string | Location)[];
    /**
     * Base price per person
     */
    basePrice: number;
    /**
     * Discounted price per person (optional)
     */
    discountedPrice?: number | null;
    /**
     * e.g., '2 hours', '1 day'
     */
    duration: string;
    /**
     * Maximum number of participants per session
     */
    maxCapacity?: number | null;
  };
  media: {
    featuredImage: string | Media;
    gallery?:
      | {
          image: string | Media;
          alt: string;
          id?: string | null;
        }[]
      | null;
  };
  activityOptions?:
    | {
        /**
         * e.g., 'Shore Diving for Beginners', 'Boat Scuba Diving'
         */
        optionTitle: string;
        optionDescription: string;
        /**
         * Price for this specific option
         */
        price: number;
        /**
         * Discounted price for this option (optional)
         */
        discountedPrice?: number | null;
        /**
         * Duration specific to this option (if different from base)
         */
        duration?: string | null;
        /**
         * Max capacity for this option (if different from base)
         */
        maxCapacity?: number | null;
        /**
         * Optional icon for the amenity
         */
        icon?: (string | null) | Media;
        isActive?: boolean | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Time slots and scheduling settings
   */
  scheduling?: {
    /**
     * Use specific time slots instead of category defaults
     */
    useCustomTimeSlots?: boolean | null;
    /**
     * Specific time slots for this activity (only used if 'Use Custom Time Slots' is enabled)
     */
    availableTimeSlots?: (string | ActivityTimeSlot)[] | null;
  };
  /**
   * Search engine optimization settings
   */
  seo?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    /**
     * Comma-separated keywords
     */
    keywords?: string | null;
  };
  /**
   * Status and visibility settings
   */
  status?: {
    isActive?: boolean | null;
    /**
     * Show this activity in featured sections
     */
    isFeatured?: boolean | null;
    /**
     * Higher numbers appear first in listings
     */
    priority?: number | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * Manage time slots available for different activity types
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "activity-time-slots".
 */
export interface ActivityTimeSlot {
  id: string;
  /**
   * Descriptive name for this time slot (e.g., 'Morning Session', 'Afternoon Adventure')
   */
  title: string;
  /**
   * Start time in 24-hour format (e.g., '09:00')
   */
  startTime: string;
  /**
   * End time in 24-hour format (e.g., '11:00')
   */
  endTime: string;
  /**
   * How this time slot appears to users (auto-generated if empty)
   */
  displayTime?: string | null;
  /**
   * Duration in minutes (auto-calculated)
   */
  duration?: number | null;
  /**
   * Which activity types can use this time slot
   */
  activityTypes: (string | ActivityCategory)[];
  /**
   * Is this time slot currently available for booking?
   */
  isActive?: boolean | null;
  /**
   * Display order (higher numbers appear first)
   */
  sortOrder?: number | null;
  /**
   * Internal notes about this time slot (not shown to users)
   */
  notes?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "time-slots".
 */
export interface TimeSlot {
  id: string;
  /**
   * Start time in 24-hour format (e.g., '09:00', '14:30')
   */
  startTime: string;
  /**
   * End time in 24-hour format (optional, for display purposes)
   */
  endTime?: string | null;
  /**
   * Type of time slot
   */
  type: 'activity' | 'ferry' | 'boat' | 'package' | 'general';
  /**
   * Duration in minutes (optional, for reference)
   */
  duration?: number | null;
  /**
   * URL-friendly identifier for this time slot
   */
  slug: string;
  /**
   * 12-hour format time (e.g., '7:00 AM', '8:00 AM')
   */
  twelveHourTime?: string | null;
  /**
   * Status and priority settings
   */
  status?: {
    /**
     * Is this time slot currently available for booking?
     */
    isActive?: boolean | null;
    /**
     * Display priority (higher numbers appear first)
     */
    priority?: number | null;
    /**
     * Mark as popular/recommended slot
     */
    isPopular?: boolean | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "activity-inventory".
 */
export interface ActivityInventory {
  id: string;
  title?: string | null;
  /**
   * The activity this inventory is for
   */
  activity: string | Activity;
  /**
   * Specific activity option/variant (if applicable)
   */
  activityOption?: string | null;
  /**
   * Service date (YYYY-MM-DD)
   */
  date: string;
  /**
   * Time slot for this inventory (optional for full-day activities)
   */
  timeSlot?: (string | null) | TimeSlot;
  /**
   * Maximum number of people that can be accommodated
   */
  totalCapacity: number;
  /**
   * Number of people currently booked
   */
  bookedCapacity?: number | null;
  /**
   * Remaining capacity (auto-calculated)
   */
  availableCapacity?: number | null;
  /**
   * Temporarily held capacity (for pending payments)
   */
  reservedCapacity?: number | null;
  status: 'available' | 'fully_booked' | 'cancelled' | 'suspended';
  /**
   * Is this inventory slot active for booking?
   */
  isActive?: boolean | null;
  /**
   * Optional price overrides for this specific date/time
   */
  priceOverrides?: {
    hasOverride?: boolean | null;
    /**
     * Override price for adults
     */
    adultPrice?: number | null;
    /**
     * Override price for children
     */
    childPrice?: number | null;
  };
  /**
   * Special notes for this date/time (weather, equipment, etc.)
   */
  operationalNotes?: string | null;
  weatherDependency?: ('no' | 'dependent' | 'indoor') | null;
  /**
   * Override location for this specific date/time (if different from activity default)
   */
  locationOverride?: (string | null) | Location;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "bookings".
 */
export interface Booking {
  id: string;
  /**
   * Unique booking confirmation number (auto-generated)
   */
  confirmationNumber?: string | null;
  /**
   * Internal booking ID (auto-generated)
   */
  bookingId?: string | null;
  customerInfo: {
    /**
     * Name of the primary contact person
     */
    primaryContactName: string;
    /**
     * Primary email for booking correspondence
     */
    customerEmail: string;
    /**
     * WhatsApp number for updates
     */
    customerPhone: string;
    nationality?: string | null;
  };
  bookingType: 'activity' | 'ferry' | 'package' | 'mixed';
  /**
   * Date when the booking was made (auto-generated)
   */
  bookingDate?: string | null;
  /**
   * Date of the actual service/activity
   */
  serviceDate: string;
  bookedActivities?:
    | {
        activity: string | Activity;
        /**
         * Specific activity option/variant selected
         */
        activityOption?: string | null;
        quantity: number;
        /**
         * Price per unit at the time of booking
         */
        unitPrice: number;
        /**
         * Total price for this activity (quantity × unitPrice)
         */
        totalPrice: number;
        /**
         * Scheduled time for this activity (HH:MM format)
         */
        scheduledTime?: string | null;
        /**
         * Location for this activity
         */
        location?: (string | null) | Location;
        passengers?: {
          adults?: number | null;
          children?: number | null;
          infants?: number | null;
        };
        id?: string | null;
      }[]
    | null;
  passengers?:
    | {
        /**
         * Is this the primary contact person?
         */
        isPrimary?: boolean | null;
        fullName: string;
        age: number;
        gender?: ('Male' | 'Female' | 'Other') | null;
        nationality?: string | null;
        /**
         * Passport/ID number for verification
         */
        passportNumber?: string | null;
        /**
         * WhatsApp number (only for primary contact)
         */
        whatsappNumber?: string | null;
        /**
         * Email address (only for primary contact)
         */
        email?: string | null;
        assignedActivities?:
          | {
              /**
               * Index of the activity this passenger is assigned to
               */
              activityIndex: number;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  pricing: {
    /**
     * Subtotal before taxes and fees
     */
    subtotal: number;
    /**
     * Total tax amount
     */
    taxes?: number | null;
    /**
     * Processing and other fees
     */
    fees?: number | null;
    /**
     * Final total amount
     */
    totalAmount: number;
    currency?: string | null;
  };
  status: 'pending' | 'confirmed' | 'cancelled' | 'completed' | 'no_show';
  paymentStatus: 'pending' | 'paid' | 'failed' | 'refunded' | 'partially_refunded';
  /**
   * Associated payment transactions
   */
  paymentTransactions?: (string | Payment)[] | null;
  /**
   * Any special requests or notes from the customer
   */
  specialRequests?: string | null;
  /**
   * Internal notes for staff (not visible to customer)
   */
  internalNotes?: string | null;
  /**
   * Customer accepted terms and conditions
   */
  termsAccepted: boolean;
  communicationPreferences?: {
    sendWhatsAppUpdates?: boolean | null;
    sendEmailUpdates?: boolean | null;
    language?: ('en' | 'hi') | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payments".
 */
export interface Payment {
  id: string;
  /**
   * Internal transaction ID (auto-generated)
   */
  transactionId?: string | null;
  /**
   * Associated booking (set after booking creation)
   */
  bookingReference?: (string | null) | Booking;
  /**
   * Razorpay specific transaction data
   */
  razorpayData?: {
    /**
     * Razorpay Order ID
     */
    razorpayOrderId?: string | null;
    /**
     * Razorpay Payment ID (after successful payment)
     */
    razorpayPaymentId?: string | null;
    /**
     * Razorpay payment signature for verification
     */
    razorpaySignature?: string | null;
    /**
     * Raw webhook data from Razorpay
     */
    razorpayWebhookData?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
  };
  /**
   * Payment amount in smallest currency unit (paise for INR)
   */
  amount: number;
  currency: string;
  paymentMethod: 'card' | 'netbanking' | 'upi' | 'wallet' | 'emi' | 'bank_transfer' | 'cash' | 'other';
  status: 'pending' | 'processing' | 'success' | 'failed' | 'cancelled' | 'refunded' | 'partially_refunded';
  /**
   * Date when payment was completed
   */
  paymentDate?: string | null;
  customerDetails?: {
    /**
     * Customer name for payment
     */
    customerName?: string | null;
    /**
     * Customer email for payment receipt
     */
    customerEmail?: string | null;
    /**
     * Customer phone for payment notifications
     */
    customerPhone?: string | null;
  };
  /**
   * Reason for payment failure (if applicable)
   */
  failureReason?: string | null;
  /**
   * Error code from payment gateway
   */
  errorCode?: string | null;
  /**
   * Refund information (if applicable)
   */
  refundDetails?: {
    /**
     * Razorpay refund ID
     */
    refundId?: string | null;
    /**
     * Refunded amount in smallest currency unit
     */
    refundAmount?: number | null;
    refundDate?: string | null;
    refundReason?: string | null;
    refundStatus?: ('pending' | 'processing' | 'processed' | 'failed') | null;
  };
  /**
   * Complete response from payment gateway
   */
  gatewayResponse?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Payment attempt number (for retry tracking)
   */
  attemptNumber?: number | null;
  /**
   * Customer IP address during payment
   */
  ipAddress?: string | null;
  /**
   * Customer browser/device information
   */
  userAgent?: string | null;
  /**
   * Internal notes about this payment
   */
  internalNotes?: string | null;
  /**
   * Payment reconciliation information
   */
  reconciliation?: {
    /**
     * Has this payment been reconciled?
     */
    isReconciled?: boolean | null;
    reconciledDate?: string | null;
    /**
     * Bank settlement reference
     */
    settlementId?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "booking-sessions".
 */
export interface BookingSession {
  id: string;
  /**
   * Unique session identifier (auto-generated)
   */
  sessionId: string;
  /**
   * User ID if user is logged in (future implementation)
   */
  userId?: string | null;
  /**
   * Browser/device information
   */
  userAgent?: string | null;
  /**
   * User's IP address
   */
  ipAddress?: string | null;
  /**
   * How the user reached the site
   */
  referrer?: string | null;
  /**
   * User's email (captured during checkout process)
   */
  userEmail?: string | null;
  /**
   * User's phone number
   */
  userPhone?: string | null;
  /**
   * User's name
   */
  userName?: string | null;
  cartItems?:
    | {
        activity: string | Activity;
        /**
         * Selected activity option/variant
         */
        activityOptionId?: string | null;
        /**
         * Search parameters (date, time, passengers, location)
         */
        searchParams?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        quantity: number;
        /**
         * Price per unit at time of adding to cart
         */
        unitPrice: number;
        /**
         * Total price for this item
         */
        totalPrice: number;
        /**
         * When this item was added to cart
         */
        addedAt?: string | null;
        /**
         * Is inventory reserved for this item?
         */
        inventoryReserved?: boolean | null;
        /**
         * When the inventory reservation expires
         */
        reservationExpiry?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Partially filled member details from checkout form
   */
  memberDetails?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Last completed checkout step (1=Details, 2=Review, 3=Payment)
   */
  checkoutStep?: number | null;
  status: 'active' | 'abandoned' | 'converted' | 'expired';
  /**
   * When this session expires
   */
  expiresAt: string;
  /**
   * Conversion and analytics data
   */
  conversionData?: {
    /**
     * The booking this session converted to
     */
    convertedBookingId?: (string | null) | Booking;
    /**
     * When the conversion happened
     */
    convertedAt?: string | null;
    /**
     * Final booking amount
     */
    totalAmount?: number | null;
    /**
     * Time from session start to conversion (minutes)
     */
    conversionTimeMinutes?: number | null;
  };
  analytics?: {
    /**
     * Number of pages viewed in this session
     */
    pageViews?: number | null;
    /**
     * Total time spent on site (minutes)
     */
    timeSpentMinutes?: number | null;
    /**
     * Did user abandon cart during checkout?
     */
    cartAbandoned?: boolean | null;
    /**
     * At which checkout step was cart abandoned
     */
    abandonedAtStep?: number | null;
  };
  /**
   * Total number of items in cart
   */
  itemCount?: number | null;
  /**
   * Total cart amount
   */
  totalAmount?: number | null;
  /**
   * Abandoned cart recovery attempts
   */
  recoveryAttempts?:
    | {
        attemptDate: string;
        method: 'email' | 'whatsapp' | 'sms' | 'push';
        success?: boolean | null;
        /**
         * User response or engagement
         */
        response?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'pages';
        value: string | Page;
      } | null)
    | ({
        relationTo: 'packages';
        value: string | Package;
      } | null)
    | ({
        relationTo: 'package-categories';
        value: string | PackageCategory;
      } | null)
    | ({
        relationTo: 'package-periods';
        value: string | PackagePeriod;
      } | null)
    | ({
        relationTo: 'locations';
        value: string | Location;
      } | null)
    | ({
        relationTo: 'activity-categories';
        value: string | ActivityCategory;
      } | null)
    | ({
        relationTo: 'activities';
        value: string | Activity;
      } | null)
    | ({
        relationTo: 'time-slots';
        value: string | TimeSlot;
      } | null)
    | ({
        relationTo: 'activity-time-slots';
        value: string | ActivityTimeSlot;
      } | null)
    | ({
        relationTo: 'activity-inventory';
        value: string | ActivityInventory;
      } | null)
    | ({
        relationTo: 'bookings';
        value: string | Booking;
      } | null)
    | ({
        relationTo: 'payments';
        value: string | Payment;
      } | null)
    | ({
        relationTo: 'booking-sessions';
        value: string | BookingSession;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  mediaType?: T;
  videoSettings?:
    | T
    | {
        autoplay?: T;
        loop?: T;
        muted?: T;
        controls?: T;
        poster?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        smallCard?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        card?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        tablet?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        desktop?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  basicInfo?:
    | T
    | {
        pageType?: T;
      };
  destinationInfo?:
    | T
    | {
        destinationType?: T;
        indexSettings?:
          | T
          | {
              showAllDestinations?: T;
              featuredDestinations?: T;
              destinationOrder?:
                | T
                | {
                    destination?: T;
                    displayOrder?: T;
                    id?: T;
                  };
            };
        mainCategorySlug?: T;
        parentMainCategory?: T;
        subcategorySlug?: T;
        subcategoryType?: T;
        navigationSettings?:
          | T
          | {
              showInNavigation?: T;
              navigationOrder?: T;
              navigationLabel?: T;
            };
      };
  seoMeta?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        metaImage?: T;
      };
  pageContent?:
    | T
    | {
        content?:
          | T
          | {
              hero?:
                | T
                | {
                    title?: T;
                    subtitle?: T;
                    description?: T;
                    image?: T;
                    ctaText?: T;
                    ctaHref?: T;
                    initialTab?: T;
                    id?: T;
                    blockName?: T;
                  };
              serviceTeaser?:
                | T
                | {
                    title?: T;
                    specialWord?: T;
                    description?: T;
                    image?: T;
                    ctaText?: T;
                    ctaHref?: T;
                    id?: T;
                    blockName?: T;
                  };
              serviceFeature?:
                | T
                | {
                    title?: T;
                    specialWord?: T;
                    description?: T;
                    image?: T;
                    ctaText?: T;
                    ctaHref?: T;
                    id?: T;
                    blockName?: T;
                  };
              faq?:
                | T
                | {
                    title?: T;
                    specialWord?: T;
                    items?:
                      | T
                      | {
                          question?: T;
                          answer?: T;
                          id?: T;
                        };
                    id?: T;
                    blockName?: T;
                  };
              largeCard?:
                | T
                | {
                    subtitle?: T;
                    title?: T;
                    image?: T;
                    imageAlt?: T;
                    ctaText?: T;
                    ctaHref?: T;
                    id?: T;
                    blockName?: T;
                  };
              trivia?:
                | T
                | {
                    title?: T;
                    text?: T;
                    highlightedPhrases?:
                      | T
                      | {
                          phrase?: T;
                          id?: T;
                        };
                    id?: T;
                    blockName?: T;
                  };
              experience?:
                | T
                | {
                    title?: T;
                    specialWord?: T;
                    description?: T;
                    cards?:
                      | T
                      | {
                          title?: T;
                          description?: T;
                          icon?: T;
                          id?: T;
                        };
                    id?: T;
                    blockName?: T;
                  };
              trustStats?:
                | T
                | {
                    title?:
                      | T
                      | {
                          text?: T;
                          specialWord?: T;
                        };
                    stats?:
                      | T
                      | {
                          value?: T;
                          description?: T;
                          icon?: T;
                          id?: T;
                        };
                    id?: T;
                    blockName?: T;
                  };
              whyChooseUs?:
                | T
                | {
                    title?: T;
                    specialWord?: T;
                    description?: T;
                    points?:
                      | T
                      | {
                          title?: T;
                          description?: T;
                          id?: T;
                        };
                    image?: T;
                    imageAlt?: T;
                    ctaText?: T;
                    ctaHref?: T;
                    id?: T;
                    blockName?: T;
                  };
              packageCarousel?:
                | T
                | {
                    title?: T;
                    description?: T;
                    slides?:
                      | T
                      | {
                          title?: T;
                          price?: T;
                          description?: T;
                          image?: T;
                          ctaLabel?: T;
                          ctaLink?: T;
                          id?: T;
                        };
                    id?: T;
                    blockName?: T;
                  };
              hiddenGems?:
                | T
                | {
                    title?: T;
                    specialWord?: T;
                    description?: T;
                    ctaText?: T;
                    ctaHref?: T;
                    images?:
                      | T
                      | {
                          image?: T;
                          alt?: T;
                          id?: T;
                        };
                    id?: T;
                    blockName?: T;
                  };
              topActivityCategories?:
                | T
                | {
                    title?: T;
                    specialWord?: T;
                    description?: T;
                    activityCategories?: T;
                    maxActivities?: T;
                    showCustomerFavorite?: T;
                    id?: T;
                    blockName?: T;
                  };
              visualCategoryGrid?:
                | T
                | {
                    title?: T;
                    specialWord?: T;
                    description?: T;
                    categories?:
                      | T
                      | {
                          title?: T;
                          subtitle?: T;
                          image?: T;
                          imageAlt?: T;
                          id?: T;
                        };
                    id?: T;
                    blockName?: T;
                  };
              howToReach?:
                | T
                | {
                    title?: T;
                    specialWord?: T;
                    description?: T;
                    cards?:
                      | T
                      | {
                          title?: T;
                          description?: T;
                          icon?: T;
                          id?: T;
                        };
                    id?: T;
                    blockName?: T;
                  };
              partners?:
                | T
                | {
                    title?: T;
                    specialWord?: T;
                    partners?:
                      | T
                      | {
                          partner?: T;
                          alt?: T;
                          id?: T;
                        };
                    id?: T;
                    blockName?: T;
                  };
              story?:
                | T
                | {
                    title?: T;
                    specialWord?: T;
                    description?: T;
                    media?: T;
                    alt?: T;
                    id?: T;
                    blockName?: T;
                  };
              testimonials?:
                | T
                | {
                    title?: T;
                    specialWord?: T;
                    subtitle?: T;
                    testimonials?:
                      | T
                      | {
                          text?: T;
                          author?: T;
                          avatar?: T;
                          rotation?: T;
                          id?: T;
                        };
                    id?: T;
                    blockName?: T;
                  };
              secondaryBanner?:
                | T
                | {
                    title?: T;
                    subtitle?: T;
                    description?: T;
                    image?: T;
                    id?: T;
                    blockName?: T;
                  };
              planInFourEasySteps?:
                | T
                | {
                    title?: T;
                    specialWord?: T;
                    description?: T;
                    steps?:
                      | T
                      | {
                          title?: T;
                          description?: T;
                          icon?: T;
                          id?: T;
                        };
                    id?: T;
                    blockName?: T;
                  };
              trustedFerries?:
                | T
                | {
                    title?: T;
                    specialWord?: T;
                    description?: T;
                    ferries?:
                      | T
                      | {
                          image?: T;
                          imageAlt?: T;
                          title?: T;
                          price?: T;
                          rating?: T;
                          href?: T;
                          id?: T;
                        };
                    id?: T;
                    blockName?: T;
                  };
              dynamicPackages?:
                | T
                | {
                    title?: T;
                    specialWord?: T;
                    description?: T;
                    showPackageSelector?: T;
                    selectorTitle?: T;
                    categoryFilter?:
                      | T
                      | {
                          useCustomSelection?: T;
                          selectedCategories?: T;
                          sortBy?: T;
                        };
                    id?: T;
                    blockName?: T;
                  };
              dynamicCategoryPackages?:
                | T
                | {
                    selectorTitle?: T;
                    showPackageSelector?: T;
                    noPackagesMessage?:
                      | T
                      | {
                          title?: T;
                          message?: T;
                          showContactButton?: T;
                        };
                    displayOptions?:
                      | T
                      | {
                          packagesPerRow?: T;
                          showPackageDetails?:
                            | T
                            | {
                                showPrice?: T;
                                showDuration?: T;
                                showLocations?: T;
                              };
                        };
                    id?: T;
                    blockName?: T;
                  };
            };
      };
  publishingSettings?:
    | T
    | {
        status?: T;
        publishedAt?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "packages_select".
 */
export interface PackagesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  coreInfo?:
    | T
    | {
        category?: T;
        period?: T;
        locations?: T;
      };
  descriptions?:
    | T
    | {
        description?: T;
        shortDescription?: T;
      };
  pricing?:
    | T
    | {
        price?: T;
        originalPrice?: T;
      };
  media?:
    | T
    | {
        images?:
          | T
          | {
              image?: T;
              alt?: T;
              caption?: T;
              id?: T;
            };
      };
  packageDetails?:
    | T
    | {
        highlights?:
          | T
          | {
              highlight?: T;
              id?: T;
            };
        inclusions?:
          | T
          | {
              inclusion?: T;
              id?: T;
            };
        exclusions?:
          | T
          | {
              exclusion?: T;
              id?: T;
            };
        itinerary?:
          | T
          | {
              day?: T;
              title?: T;
              description?: T;
              activities?:
                | T
                | {
                    activity?: T;
                    id?: T;
                  };
              id?: T;
            };
        notes?:
          | T
          | {
              note?: T;
              id?: T;
            };
      };
  featuredSettings?:
    | T
    | {
        featured?: T;
        featuredOrder?: T;
      };
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        metaImage?: T;
      };
  publishingSettings?:
    | T
    | {
        status?: T;
        publishedAt?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "package-categories_select".
 */
export interface PackageCategoriesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  categoryDetails?:
    | T
    | {
        description?: T;
        shortDescription?: T;
      };
  media?:
    | T
    | {
        heroImage?: T;
        cardImages?:
          | T
          | {
              image?: T;
              alt?: T;
              id?: T;
            };
      };
  displaySettings?:
    | T
    | {
        order?: T;
        isActive?: T;
        isFeatured?: T;
        pageTitle?: T;
        specialWord?: T;
      };
  content?:
    | T
    | {
        highlights?:
          | T
          | {
              highlight?: T;
              id?: T;
            };
        popularDestinations?:
          | T
          | {
              destination?: T;
              isPopular?: T;
              id?: T;
            };
      };
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        metaImage?: T;
        keywords?:
          | T
          | {
              keyword?: T;
              id?: T;
            };
        systemCategoryId?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "package-periods_select".
 */
export interface PackagePeriodsSelect<T extends boolean = true> {
  title?: T;
  value?: T;
  shortTitle?: T;
  order?: T;
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "locations_select".
 */
export interface LocationsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  type?: T;
  description?: T;
  media?:
    | T
    | {
        featuredImage?: T;
        gallery?:
          | T
          | {
              image?: T;
              alt?: T;
              caption?: T;
              id?: T;
            };
      };
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
      };
  isActive?: T;
  priority?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "activity-categories_select".
 */
export interface ActivityCategoriesSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  description?: T;
  isActive?: T;
  sortOrder?: T;
  parentCategory?: T;
  image?: T;
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "activities_select".
 */
export interface ActivitiesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  coreInfo?:
    | T
    | {
        description?: T;
        shortDescription?: T;
        category?: T;
        location?: T;
        basePrice?: T;
        discountedPrice?: T;
        duration?: T;
        maxCapacity?: T;
      };
  media?:
    | T
    | {
        featuredImage?: T;
        gallery?:
          | T
          | {
              image?: T;
              alt?: T;
              id?: T;
            };
      };
  activityOptions?:
    | T
    | {
        optionTitle?: T;
        optionDescription?: T;
        price?: T;
        discountedPrice?: T;
        duration?: T;
        maxCapacity?: T;
        icon?: T;
        isActive?: T;
        id?: T;
      };
  scheduling?:
    | T
    | {
        useCustomTimeSlots?: T;
        availableTimeSlots?: T;
      };
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?: T;
      };
  status?:
    | T
    | {
        isActive?: T;
        isFeatured?: T;
        priority?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "time-slots_select".
 */
export interface TimeSlotsSelect<T extends boolean = true> {
  startTime?: T;
  endTime?: T;
  type?: T;
  duration?: T;
  slug?: T;
  twelveHourTime?: T;
  status?:
    | T
    | {
        isActive?: T;
        priority?: T;
        isPopular?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "activity-time-slots_select".
 */
export interface ActivityTimeSlotsSelect<T extends boolean = true> {
  title?: T;
  startTime?: T;
  endTime?: T;
  displayTime?: T;
  duration?: T;
  activityTypes?: T;
  isActive?: T;
  sortOrder?: T;
  notes?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "activity-inventory_select".
 */
export interface ActivityInventorySelect<T extends boolean = true> {
  title?: T;
  activity?: T;
  activityOption?: T;
  date?: T;
  timeSlot?: T;
  totalCapacity?: T;
  bookedCapacity?: T;
  availableCapacity?: T;
  reservedCapacity?: T;
  status?: T;
  isActive?: T;
  priceOverrides?:
    | T
    | {
        hasOverride?: T;
        adultPrice?: T;
        childPrice?: T;
      };
  operationalNotes?: T;
  weatherDependency?: T;
  locationOverride?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "bookings_select".
 */
export interface BookingsSelect<T extends boolean = true> {
  confirmationNumber?: T;
  bookingId?: T;
  customerInfo?:
    | T
    | {
        primaryContactName?: T;
        customerEmail?: T;
        customerPhone?: T;
        nationality?: T;
      };
  bookingType?: T;
  bookingDate?: T;
  serviceDate?: T;
  bookedActivities?:
    | T
    | {
        activity?: T;
        activityOption?: T;
        quantity?: T;
        unitPrice?: T;
        totalPrice?: T;
        scheduledTime?: T;
        location?: T;
        passengers?:
          | T
          | {
              adults?: T;
              children?: T;
              infants?: T;
            };
        id?: T;
      };
  passengers?:
    | T
    | {
        isPrimary?: T;
        fullName?: T;
        age?: T;
        gender?: T;
        nationality?: T;
        passportNumber?: T;
        whatsappNumber?: T;
        email?: T;
        assignedActivities?:
          | T
          | {
              activityIndex?: T;
              id?: T;
            };
        id?: T;
      };
  pricing?:
    | T
    | {
        subtotal?: T;
        taxes?: T;
        fees?: T;
        totalAmount?: T;
        currency?: T;
      };
  status?: T;
  paymentStatus?: T;
  paymentTransactions?: T;
  specialRequests?: T;
  internalNotes?: T;
  termsAccepted?: T;
  communicationPreferences?:
    | T
    | {
        sendWhatsAppUpdates?: T;
        sendEmailUpdates?: T;
        language?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payments_select".
 */
export interface PaymentsSelect<T extends boolean = true> {
  transactionId?: T;
  bookingReference?: T;
  razorpayData?:
    | T
    | {
        razorpayOrderId?: T;
        razorpayPaymentId?: T;
        razorpaySignature?: T;
        razorpayWebhookData?: T;
      };
  amount?: T;
  currency?: T;
  paymentMethod?: T;
  status?: T;
  paymentDate?: T;
  customerDetails?:
    | T
    | {
        customerName?: T;
        customerEmail?: T;
        customerPhone?: T;
      };
  failureReason?: T;
  errorCode?: T;
  refundDetails?:
    | T
    | {
        refundId?: T;
        refundAmount?: T;
        refundDate?: T;
        refundReason?: T;
        refundStatus?: T;
      };
  gatewayResponse?: T;
  attemptNumber?: T;
  ipAddress?: T;
  userAgent?: T;
  internalNotes?: T;
  reconciliation?:
    | T
    | {
        isReconciled?: T;
        reconciledDate?: T;
        settlementId?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "booking-sessions_select".
 */
export interface BookingSessionsSelect<T extends boolean = true> {
  sessionId?: T;
  userId?: T;
  userAgent?: T;
  ipAddress?: T;
  referrer?: T;
  userEmail?: T;
  userPhone?: T;
  userName?: T;
  cartItems?:
    | T
    | {
        activity?: T;
        activityOptionId?: T;
        searchParams?: T;
        quantity?: T;
        unitPrice?: T;
        totalPrice?: T;
        addedAt?: T;
        inventoryReserved?: T;
        reservationExpiry?: T;
        id?: T;
      };
  memberDetails?: T;
  checkoutStep?: T;
  status?: T;
  expiresAt?: T;
  conversionData?:
    | T
    | {
        convertedBookingId?: T;
        convertedAt?: T;
        totalAmount?: T;
        conversionTimeMinutes?: T;
      };
  analytics?:
    | T
    | {
        pageViews?: T;
        timeSpentMinutes?: T;
        cartAbandoned?: T;
        abandonedAtStep?: T;
      };
  itemCount?: T;
  totalAmount?: T;
  recoveryAttempts?:
    | T
    | {
        attemptDate?: T;
        method?: T;
        success?: T;
        response?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "navigation".
 */
export interface Navigation {
  id: string;
  /**
   * Configure the main header navigation menu
   */
  mainNavigation?:
    | {
        /**
         * Type of navigation item
         */
        type: 'simple' | 'activities' | 'packages' | 'specials' | 'destinations' | 'custom';
        /**
         * Display text for the navigation item
         */
        label: string;
        /**
         * URL for the main link (e.g., /activities, /packages)
         */
        href: string;
        /**
         * Whether the parent item should be clickable
         */
        isClickable?: boolean | null;
        /**
         * Apply unique styling (e.g., CTA button)
         */
        unique?: boolean | null;
        /**
         * Select activity categories to show in dropdown
         */
        activityCategories?: (string | ActivityCategory)[] | null;
        /**
         * Select package categories to show in dropdown
         */
        packageCategories?: (string | PackageCategory)[] | null;
        /**
         * OPTIONAL: Manual override for destination navigation. Leave empty to auto-populate from destination pages in the Pages collection.
         */
        destinationConfig?:
          | {
              /**
               * Main destination category (e.g., Port Blair, Havelock, Neil Island)
               */
              mainCategory: string;
              /**
               * URL slug for the main category (e.g., port-blair, havelock, neil-island)
               */
              mainCategorySlug: string;
              /**
               * Subcategories/specific locations within this main category
               */
              subcategories?:
                | {
                    /**
                     * Name of the subcategory/location
                     */
                    name: string;
                    /**
                     * URL slug for the subcategory
                     */
                    slug: string;
                    /**
                     * Show this subcategory in navigation
                     */
                    isActive?: boolean | null;
                    id?: string | null;
                  }[]
                | null;
              /**
               * Show this main category in navigation
               */
              isActive?: boolean | null;
              /**
               * Display order for this main category
               */
              order?: number | null;
              id?: string | null;
            }[]
          | null;
        /**
         * Custom dropdown items (use for destinations, etc.)
         */
        customItems?:
          | {
              label: string;
              href: string;
              isActive?: boolean | null;
              id?: string | null;
            }[]
          | null;
        displaySettings?: {
          /**
           * Display order in navigation
           */
          order?: number | null;
          /**
           * Show this item in navigation
           */
          isActive?: boolean | null;
          /**
           * Maximum number of items to show in dropdown
           */
          maxDropdownItems?: number | null;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "navigation_select".
 */
export interface NavigationSelect<T extends boolean = true> {
  mainNavigation?:
    | T
    | {
        type?: T;
        label?: T;
        href?: T;
        isClickable?: T;
        unique?: T;
        activityCategories?: T;
        packageCategories?: T;
        destinationConfig?:
          | T
          | {
              mainCategory?: T;
              mainCategorySlug?: T;
              subcategories?:
                | T
                | {
                    name?: T;
                    slug?: T;
                    isActive?: T;
                    id?: T;
                  };
              isActive?: T;
              order?: T;
              id?: T;
            };
        customItems?:
          | T
          | {
              label?: T;
              href?: T;
              isActive?: T;
              id?: T;
            };
        displaySettings?:
          | T
          | {
              order?: T;
              isActive?: T;
              maxDropdownItems?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}